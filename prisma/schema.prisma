generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  profile   Profile?
  devices   Device[]
  messageId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id        String   @id @default(uuid())
  os        String
  isActive  Boolean  @default(true)
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  fullName  String
  isOnline  Boolean   @default(false)
  messages  Message[]
  rooms     Room[]
  groups    Group[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id        String    @id @default(uuid())
  text      String
  isRead    Boolean   @default(false)
  readTime  DateTime?
  profileId String
  roomId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id])
}

model Room {
  id        String    @id @default(uuid())
  profiles  Profile[]
  messages  Message[]
  group     Group?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Group {
  id          String   @id @default(uuid())
  name        String
  isAdminOnly Boolean  @default(false)
  adminId     String
  roomId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin Profile @relation(fields: [adminId], references: [id])
  room  Room    @relation(fields: [roomId], references: [id])
}
